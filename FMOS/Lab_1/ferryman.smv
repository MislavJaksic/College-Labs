-- Players: ferryman, wolf, goat, cabbage.
-- Problem:
-- 	All start on one (right) side of the river.
-- 	All should end up on the other (left) side of the river.
--	The ferryman can only take one object at a time.
--	If left alone without the ferryman:
--		The wolf eats the goat, or
-- 		The goat eats the cabbage.

MODULE main
VAR
-- the ferryman and the three items
  cabbage  : {right,left};
  goat     : {right,left};
  wolf     : {right,left};
  ferryman : {right,left};
  carry_cabbage: boolean;
  carry_goat : boolean;
  carry_wolf : boolean;
  no_carry : boolean;
  
-- possible moves
  move    : {c, g, w, e};


-- initially everything is on the right bank
ASSIGN
  init(cabbage)  := right;
  init(goat)     := right;
  init(wolf)     := right;
  init(ferryman) := right;

  carry_cabbage := move=c;
  carry_goat := move=g;
  carry_wolf := move=w;
  no_carry := move=e;
  
TRANS
  carry_cabbage -> 
		cabbage=ferryman & -- cabbage is carried by the ferryman
		next(cabbage)!=cabbage &
		next(ferryman)!=ferryman &
		next(goat)=goat &
		next(wolf)=wolf

TRANS
  carry_goat -> 
		goat=ferryman & 
		next(goat)!=goat & 
		next(ferryman)!=ferryman &
		next(cabbage)=cabbage &
		next(wolf)=wolf


TRANS
  carry_wolf -> 
		wolf=ferryman & 
		next(wolf)!=wolf & 
		next(ferryman)!=ferryman &
		next(goat)=goat &
		next(cabbage)=cabbage

TRANS
  no_carry -> 
	next(ferryman)!=ferryman &
	next(goat)=goat &
	next(cabbage)=cabbage &
	next(wolf)=wolf 
		

-- goat and wolf must not be left unattended !
-- goat and cabbage must not be left unattended !
DEFINE
  safe_state := (goat = wolf | goat = cabbage) -> goat = ferryman;
  goal := cabbage = left & goat = left & wolf = left;
CTLSPEC ! E [safe_state U goal]
