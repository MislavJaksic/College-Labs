MODULE main
VAR
	proc0 : process user(proc1.flag);
	proc1 : process user(proc0.flag);
CTLSPEC AG ! (proc0.state = critical & proc1.state = critical)
CTLSPEC AG (proc0.state = testflag -> AF proc0.state = critical)
CTLSPEC EF (EG (proc0.state = testflag1 | proc0.state = testflag))

MODULE user(oflag)
VAR
	flag : boolean;
	state  : {start, testflag, testflag1, critical, noncritical};
ASSIGN
	init(state) := start;
	init(flag) := TRUE;
	next(state) :=
		case
			state = start : testflag;
			state = testflag & oflag : testflag1;
			state = testflag & !oflag : critical;
			state = testflag1 & oflag : testflag1;
			state = testflag1 & !oflag : testflag;
			state = critical : {critical, noncritical};
			state = noncritical : {noncritical, start};
			TRUE : state;
		esac;

	next(flag) := 
		case 
			state = start : TRUE;
			state = testflag & oflag : FALSE;
			state = testflag1 & !oflag : TRUE;
			state = noncritical : FALSE;
			TRUE : flag;
		esac;
JUSTICE running
JUSTICE ! (state = critical)
JUSTICE ! (state = noncritical)