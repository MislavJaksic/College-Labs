## RZNU

### Chapter 2

World Wide Web: applications and services base don the HTTP protocol

HTTP: client server architecture
      asymmetric request response protocol
      
URI: Uniform Resource Identifier
     syntax:  protocol://hostname:port/path-and-file-name?parameters
     example: http://    www.fer.unizg.hr/zavod/zemris
       - protocol: HTTP, HTTPS, FTP
       - hostname: www.fer.unizg.hr, 161.53.72.120
       - port: TCP port number on which the server is listning for requests
       - path-and-file-name: name and location of the requested resource
       - parameters: used to describe a resource
       
HTTP client algorithm:
1) Client takes a URI as input
2) Client parses the URI
  Optional: only done if the user gives a DNS name instead of IP address
  3) Client asks the DNS server for web server’s IP address
  4) DNS server responds with IP address
5) Client opens a network connection to a given IP address and TCP port
6) Client sends an HTTP request message to the web server
7) Server maps the URI to a local file or program
8) Server returns an HTTP response message
9) Client processes the response (e.g. web browser renders GUI and displays a web page to the user)

HTTP messages: made up of a header and body
  Request messages: header: request line: syntax: request-method-name request-URI HTTP-version
                              - request-method-name: GET, PUT, POST, DELETE, HEAD, OPTIONS
                              - request-URI: specifies the resource on the web server
                              - HTTP-version: HTTP/1.0 or HTTP/1.1
                            request headers: syntax: request-header-name: request-header-value1, request-header-value2, ...
                                             in the form of "name: value" pairs
                              - request-header-name: 
                              - request-header-value1: 
                              - ...
                    request body: optional, no formal structure
                    
  Response messages: header: status line: syntax: HTTP-version status-code reason-phrase
                              - HTTP-version: HTTP/1.0 or HTTP/1.1
                              - status-code: 3-digit code generated by the server to reflect the request outcome
                              - reason-phrase: a short explanation to the status code
                            request headers: syntax: response-header-name: resp-header-value1, resp-header-value2, ...
                                             in the form of "name: value" pairs
                              - request-header-name: 
                              - request-header-value1: 
                              - ...
                    request body: no formal structure