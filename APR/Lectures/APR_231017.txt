2.2 Optimiziranje f-je vise varijable bez uporabe derivacija

Ili u jednoj dimenziji prosiri na vise dimenzija ili izmisli nekaj sasvim nono.

Nekaj sasvim novo: Hooke-Jeeves
  - ulazni podaci: pocetna tocka x0 (to je vektor, jer radimo u vise dimenzija), deltaX govori koliko cemo koracati, epsilon je preciznost.
    - x0, deltaX, epsilon
  - dijelovi: istrazivanje - radi pomak svake varijable u minus i plus smjeru za deltaX (svaki dio vektora ima svoj korak)
                             - za svaku vrijednost u x napravi korak u minus i plus i neovisno odluci kamo cemo se pomaknuti za svaku vrijednost
              kretanje - pokrenuli smo se u smjeru gdje je vrijednost f-je najmanja
                       - zatim se povuce pravac u smjeru gdje smo se pomaknuli i pokusamo se pomaknuti u istom smjeru za istu udaljenost
                       - uspjesnost skoka se provjerava uvjetom: if ( f(xn) <  f(xb) )
                       - "skok" (refleksija) xb preko xn: x = 2x1 - x0  
  - xb je bazna tocka, xm je tocka dobivena pretrazivanjem, xp je pocetna tocka za pretrazivanje

Nemoj implementirati kod u skripti, ali mozes onaj na webu.

Primjer: f(x1, x2) = (x1**2) + 4*(x2**2), x0 = 7,3, deltaX = 1, epsilon = 0.25
deltaX je skalar -> za sve vrijednosti u x koracamo jednako

xb      xp     xn     uvjet
7, 3    7, 3   6, 2    da     - u pocetnom koraku: xb je isti kao xp 
                              - xn je tocka najbliza minimumu: za deltaX se pomaknemo u svakom smjeru
                                - prva koordinata, tocka korakne, pomakni tocku, druga koordinata, tocka korakne, pomakni tocku, ...
                              - uvjet: F(xb) > F(xn)
                                - ako da:
6,2    5, 1   4,0      da        - xpNOVA je xbSTARA reflektirana preko xnSTARA (izracun koordinate: xpNOVA = 2*xnSTARA - xbSTARA)
                                 - xbNOVA je najbolja izmedu xbSTARA, xpSTARA, xnSTARA
4,0    2,-2  1,-1      da         
                               
1,-1  -2,-2  -1,-1     ne       - ako ne:
                                 - x0 je xbSTARA, nastavi rjesavati kao da si u pocetnom korak
                                 - deltaXNOVI = deltaXSTARI / 2, sve velicine koraka se prepolove
1,-1   1,-1  0.5,-0.5  da

0.5,-0.5 0,0   0,0     da

0,0   -0.5,0.5 0,0     ne     - zaustavni uvjet je dolazak deltaX do epsilona nakon prepolavljanja    

Primjer: f(x1, x2, x3) = (x1**2) + (x2**2) + (x3**2)
Rijesen u biljeznici.



2.2.2 Simpleks postupak po Nelderu i Meadu
Koristi posebnu simpleks strukturu: skup od n+1 tocke koji u n-dimenzijskom prostoru cini n-dimenzijsku tvorevinu 

Slican Hooke-Jeeves, ali koristi vise tocaka, ne samo jednu.
Pravi Simpleks ima jednako udaljene tocke, ali za nas to nije potrebno. 

Podaci: tocke simpleksa X[i], tocka s najboljom vrijednoscu funkcije cilja X[l], tocka s najlosijom vrijednoscu funkcije cilja X[h].  
Izracunamo centroid xc: aritmeticka sredina svih tocaka, osim najlosije tocke.

Operacije:
  - refleksija - prvo pokusaj
               - refleksija x[h] preko xc da se dobije tocka xr
               - faktor alpha je omjer translacije (pocetno je alpha = 1)
               - xr = (1 + alpha)*xc - alpha*X[h]
  
  - ekspanzija - pokusaj sljedece
               - ako smjer refleksije daje dobru rezultantnu tocku, "pojacaj" refleksiju
               - faktor gama (pocetno je gama = 2)
               - xe = (1 - gama)*xc + gama*xr
  
  - kontrakcija - pokusaj ako refleksija ne uspije
                - sluzi za zaustavljanje tvorevine simpleks iznad minimuma primicanjem najgore tocke prema centroidu
                - faktor beta (pocetno je beta = 0.5)
                - xk = (1 - beta)*xc + beta*X[h]
  
  - pomaki simpleks - pokusaj ako nista drugo ne radi
                    - sve tocke simpleksa se pomaknu prema najboljoj tocki X[l]
                    - X[i] = 0.5*(X[i] + X[l])
  
  - izbaci najgoru tocku, a zadrze ostale -> tako se simpleks krece

Ispituju se koraci, ne cijele iteracije algoritma niti algoritam sam.

Primjer: f(x1, x2, x3) = (x1**2) + (x2**2) + (x3**2) i cetri tocke.
 1  2  3 f=14
 0  2  4 f=20 <- izbaci je, pa izracunaj centrodid
-2  0  3 f=13
-4  0  1 f=17

Nadi centroid!
x[c] = -5/3  2/3  7/3

Primjer: f(x1, x2) = (x1**2) + (x2**2) i tri tocke simpleksa.
0  0 
2  0
1  2

Skiciraj rekleksiju, ekspanziju i kontrakciju. <- rjesenje u biljeznici



2.2.3 Trazenje minimuma na pravcu

Primjer: fx = (x1 - 2)**2 + (x2 - 1)**2, x0=(0, 0), h=1, v=(2, 1)
Pronadi minimum zadane funkcije na pravcu pronalaznjem unimodalnog intervala i postupkom zlatnog reza.



2.2.4 Trazenje u smjerovima koordinatnim osi
Idi po x1, pa kad si najbolje nasao, idi po x2, pa kad si najbolje nasao ...

Jedna iteracija ovog algoritma je kada se produ sve osi.
Methoda je losa jer ako imamo dugacku tanku dolinu ,on ce se jako muciti.

Nedostatak svih algoritama je da algoritam moze zapeti na ostar rub.
